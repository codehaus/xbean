/**
 *
 * Copyright 2005 the original author or authors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.xbean.spring.generator;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * @author Dain Sundstrom
 * @version $Id$
 * @since 1.0
 */
public class DocumentationGenerator implements GeneratorPlugin {
    private final File destFile;
    private final LogFacade log;

    public DocumentationGenerator(LogFacade log, File destFile) {
        this.destFile = destFile;
        this.log = log;
    }

    public void generate(NamespaceMapping namespaceMapping) throws IOException {
        String namespace = namespaceMapping.getNamespace();

        // TODO can only handle 1 schema document so far...
        File file = new File(destFile.getParentFile(), destFile.getName() + ".html");
        log.log("Generating HTML documentation file: " + file + " for namespace: " + namespace);
        PrintWriter out = new PrintWriter(new FileWriter(file));
        try {
            generateDocumentation(out, namespace, namespaceMapping.getElements(), namespaceMapping.getRootElement());
        } finally {
            out.close();
        }
    }

    private void generateDocumentation(PrintWriter out, String namespace, Set elements, ElementMapping rootElement) {
        out.println("<!-- NOTE: this file is autogenerated by XBeans -->");
        out.println("<html>");
        out.println("<head>");
        out.println("<title>Schema for namespace: " + namespace + "</title>");
        out.println("<link rel='stylesheet' href='style.css' type='text/css'>");
        out.println("<link rel='stylesheet' href='http://activemq.org/style.css' type='text/css'>");
        out.println("<link rel='stylesheet' href='http://activemq.org/style-xb.css' type='text/css'>");
        out.println("</head>");
        out.println();
        out.println("<body>");
        out.println();

        if (rootElement != null) {
            out.println("<h1>Root Element</h1>");
            out.println("<table>");
            out.println("  <tr><th>Element</th><th>Description</th><th>Class</th>");
            generateHtmlElementSummary(out, rootElement);
            out.println("</table>");
            out.println();
        }

        out.println("<h1>Element Summary</h1>");
        out.println("<table>");
        out.println("  <tr><th>Element</th><th>Description</th><th>Class</th>");
        for (Iterator iter = elements.iterator(); iter.hasNext();) {
            ElementMapping element = (ElementMapping) iter.next();
            generateHtmlElementSummary(out, element);
        }
        out.println("</table>");
        out.println();
        out.println();

        out.println("<h1>Element Detail</h1>");
        for (Iterator iter = elements.iterator(); iter.hasNext();) {
            ElementMapping element = (ElementMapping) iter.next();
            generateHtmlElementDetail(out, element);
        }

        out.println();
        out.println("</body>");
        out.println("</html>");
    }

    private void generateHtmlElementSummary(PrintWriter out, ElementMapping element) {
        out.println("  <tr>" +
                "<td><a href='#" + element.getElementName() + "'>" + element.getElementName() + "</a></td>" +
                "<td>" + element.getDescription() + "</td>" +
                "<td>" + element.getClassName() + "</td></tr>");
    }

    private void generateHtmlElementDetail(PrintWriter out, ElementMapping element) {
        String localName = element.getElementName();
        out.println("<h2>Element: <a name='" + localName + "'>" + localName + "</a></h2>");

        out.println("<table>");
        out.println("  <tr><th>Attribute</th><th>Type</th><th>Description</th>");
        for (Iterator iterator = element.getAttributes().iterator(); iterator.hasNext();) {
            AttributeMapping attributeMapping = (AttributeMapping) iterator.next();
            if (Utils.isSimpleType(attributeMapping)) {
                out.println("  <tr><td>" + attributeMapping.getAttributeName() + "</td><td>" + Utils.getXsdType(attributeMapping)
                        + "</td><td>" + attributeMapping.getDescription() + "</td></tr>");
            }

        }
        out.println("</table>");

        out.println("<table>");
        out.println("  <tr><th>Element</th><th>Type</th><th>Description</th>");
        for (Iterator iterator = element.getAttributes().iterator(); iterator.hasNext();) {
            AttributeMapping attributeMapping = (AttributeMapping) iterator.next();
            if (!Utils.isSimpleType(attributeMapping)) {
                out.print("  <tr><td>" + attributeMapping.getAttributeName() + "</td><td>");
                printComplexPropertyTypeDocumentation(out, attributeMapping);
                out.println("</td><td>" + attributeMapping.getDescription() + "</td></tr>");
            }
        }
        out.println("</table>");
    }

    private void printComplexPropertyTypeDocumentation(PrintWriter out, AttributeMapping attributeMapping) {
        if (attributeMapping.isList()) {
            out.print("<list/>");
        } else {
            int counter = 0;
            // lets find all the implementations of the type
            List types = Collections.EMPTY_LIST;
//            List types = findImplementationsOf(type);
            for (Iterator iter = types.iterator(); iter.hasNext();) {
                ElementMapping element = (ElementMapping) iter.next();
                if (counter++ > 0) {
                    out.print(" | ");
                }
                out.print("<" + element.getElementName() + "/>");
            }
            if (counter > 0) {
                out.print(" | ");
            }
            out.print("<spring:bean/>");
        }
    }

// todo this method does nothing
//    private List findImplementationsOf(JClass type) {
//        List answer = new ArrayList();
//        for (Iterator iter = answer.iterator(); iter.hasNext();) {
//            ElementMapping element = (ElementMapping) iter.next();
//            if (Utils.isImplementationOf(type, element.getType())) {
//                answer.add(element);
//            }
//        }
//        return answer;
//    }
}
